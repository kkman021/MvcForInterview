

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "EIP.Entities\App.config"
//     Connection String Name: "EIPDbContext"
//     Connection String:      "data source=(LocalDb)\MSSQLLocalDB;initial catalog=EIP;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Express Edition (64-bit)
// Database Engine Edition : Express
// Database Version        : 13.0.4001.0

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace EIP.Entities
{

    #region Unit of work

    public partial interface IEipDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Employee> Employees { get; set; } // Employee

        int SaveChanges();
		//Add by Ming not include in the tool,If update need add again.
        int SaveChanges(int operatorId);
        System.Threading.Tasks.Task<int> SaveChangesAsync();
		//Add by Ming not include in the tool,If update need add again.
        System.Threading.Tasks.Task<int> SaveChangesAsync(int operatorId);
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public partial class EipDbContext : System.Data.Entity.DbContext, IEipDbContext
    {
        public System.Data.Entity.DbSet<Employee> Employees { get; set; } // Employee

        static EipDbContext()
        {
            System.Data.Entity.Database.SetInitializer<EipDbContext>(null);
        }

        public EipDbContext()
            : base("Name=EIPDbContext")
        {
            InitializePartial();
        }

        public EipDbContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public EipDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public EipDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public EipDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        public EipDbContext(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new EmployeeConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new EmployeeConfiguration(schema));
            OnCreateModelPartial(modelBuilder, schema);
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
		static partial void OnCreateModelPartial(System.Data.Entity.DbModelBuilder modelBuilder, string schema);        
    }
    #endregion

    #region Database context factory

    public partial class EipDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<EipDbContext>
    {
        public EipDbContext Create()
        {
            return new EipDbContext();
        }
    }

    #endregion

    #region POCO classes

    // Employee
    [Table("Employee", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public partial class Employee
    {

        ///<summary>
        /// 員工唯一流水識別碼
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_Employee", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        ///<summary>
        /// 員工編號
        ///</summary>
        [Column(@"No", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "No")]
        public string No { get; set; } // No (length: 50)

        [Column(@"ChtName", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Cht name")]
        public string ChtName { get; set; } // ChtName (length: 30)

        ///<summary>
        /// 英文姓名
        ///</summary>
        [Column(@"EngName", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Eng name")]
        public string EngName { get; set; } // EngName (length: 30)

        ///<summary>
        /// 員工 Email
        ///</summary>
        [Column(@"Email", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(100)]
        [StringLength(100)]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } // Email (length: 100)

        ///<summary>
        /// 建立時間
        ///</summary>
        [Column(@"CreateOnUtc", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Create on utc")]
        public System.DateTime CreateOnUtc { get; set; } // CreateOnUtc

        ///<summary>
        /// 建立操作人員
        ///</summary>
        [Column(@"CreateBy", Order = 7, TypeName = "int")]
        [Required]
        [Display(Name = "Create by")]
        public int CreateBy { get; set; } // CreateBy

        ///<summary>
        /// 更新時間
        ///</summary>
        [Column(@"ModifyOnUtc", Order = 8, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modify on utc")]
        public System.DateTime ModifyOnUtc { get; set; } // ModifyOnUtc

        ///<summary>
        /// 更新操作人員
        ///</summary>
        [Column(@"ModifyBy", Order = 9, TypeName = "int")]
        [Required]
        [Display(Name = "Modify by")]
        public int ModifyBy { get; set; } // ModifyBy

        public Employee()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public partial class EmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Employee>
    {
        public EmployeeConfiguration()
            : this("dbo")
        {
        }

        public EmployeeConfiguration(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

}
// </auto-generated>

